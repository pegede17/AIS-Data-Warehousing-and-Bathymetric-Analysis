# Populate time table
INSERT INTO public."time"(time_id, hour, minute, second)
    select to_char(second, 'hh24miss')::integer AS time_id,
	extract(hour from second) as Hour, 
    extract(minute from second) as Minute,
	extract(second from second) as Second
from (SELECT '0:00'::time + (sequence.second || ' seconds')::interval AS second
	FROM generate_series(0,86399) AS sequence(second)
    GROUP BY sequence.second
	 ) DQ
 	order by 1;

INSERT INTO public.date(
	date_id, millennium, century, decade, iso_year, year, month, day, day_of_week, iso_day_of_week, day_of_year, quarter, epoch, week)
	VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

INSERT INTO public.date(
	date_id, millennium, century, decade, iso_year, year, month, day, day_of_week, iso_day_of_week, day_of_year, quarter, epoch, week)
	SELECT
-- 	datum as Date,
	to_char(datum, 'YYYYMMDD')::integer,
	extract(millennium from datum) AS Millenium,
	extract(century from datum) AS Century,
	extract(decade from datum) AS Decade,
	extract(isoyear from datum) AS iso_year,
	extract(year from datum) AS Year,
	extract(month from datum) AS Month,
	extract(day from datum) AS Day,
	extract(dow from datum) AS day_of_week,
	extract(isodow from datum) AS iso_day_of_week,
	extract(doy from datum) AS DayOfYear,
	extract(quarter from datum) AS Quarter,
	extract(epoch from datum) AS Epoch,
	extract(week from datum) AS Week
	
-- 	-- Localized weekday
-- 	to_char(datum, 'TMDay') AS WeekdayName,
-- 	-- ISO calendar week
-- 	extract(week from datum) AS CalendarWeek,
-- 	to_char(datum, 'dd. mm. yyyy') AS FormattedDate,
-- 	'Q' || to_char(datum, 'Q') AS Quartal,
-- 	to_char(datum, 'yyyy/"Q"Q') AS YearQuartal,
-- 	to_char(datum, 'yyyy/mm') AS YearMonth,
-- 	-- ISO calendar year and week
-- 	to_char(datum, 'iyyy/IW') AS YearCalendarWeek,
-- 	-- Weekend
-- 	CASE WHEN extract(isodow from datum) in (6, 7) THEN 'Weekend' ELSE 'Weekday' END AS Weekend,
-- 	-- Fixed holidays 
--         -- for America
--         CASE WHEN to_char(datum, 'MMDD') IN ('0101', '0704', '1225', '1226')
-- 		THEN 'Holiday' ELSE 'No holiday' END
-- 		AS AmericanHoliday,
--         -- for Austria
-- 	CASE WHEN to_char(datum, 'MMDD') IN 
-- 		('0101', '0106', '0501', '0815', '1101', '1208', '1225', '1226') 
-- 		THEN 'Holiday' ELSE 'No holiday' END 
-- 		AS AustrianHoliday,
--         -- for Canada
--         CASE WHEN to_char(datum, 'MMDD') IN ('0101', '0701', '1225', '1226')
-- 		THEN 'Holiday' ELSE 'No holiday' END 
-- 		AS CanadianHoliday,
-- 	-- Some periods of the year, adjust for your organisation and country
-- 	CASE WHEN to_char(datum, 'MMDD') BETWEEN '0701' AND '0831' THEN 'Summer break'
-- 	     WHEN to_char(datum, 'MMDD') BETWEEN '1115' AND '1225' THEN 'Christmas season'
-- 	     WHEN to_char(datum, 'MMDD') > '1225' OR to_char(datum, 'MMDD') <= '0106' THEN 'Winter break'
-- 		ELSE 'Normal' END
-- 		AS Period,
-- 	-- ISO start and end of the week of this date
-- 	datum + (1 - extract(isodow from datum))::integer AS CWStart,
-- 	datum + (7 - extract(isodow from datum))::integer AS CWEnd,
-- 	-- Start and end of the month of this date
-- 	datum + (1 - extract(day from datum))::integer AS MonthStart,
-- 	(datum + (1 - extract(day from datum))::integer + '1 month'::interval)::date - '1 day'::interval AS MonthEnd
FROM (
	-- There are 3 leap years in this range, so calculate 365 * 10 + 3 records
	SELECT '2021-01-01'::DATE + sequence.day AS datum
	FROM generate_series(0,2000) AS sequence(day)
	GROUP BY sequence.day
     ) DQ
order by 1;


-- Find points in polygon
SELECT fact_id, coordinate from fact_table 
WHERE  ts_time_id > 100000 AND ts_time_id < 100500 AND ST_CONTAINS(ST_Polygon('LINESTRING(11 55, 11 54, 12 54, 12 55, 11 55)'::geometry, 4326),coordinate::geometry);