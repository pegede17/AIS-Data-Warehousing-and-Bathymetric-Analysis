EXPLAIN with fact as (
SELECT coordinate, fact_id from fact_ais_clean_v2 limit 1000
)
	SELECT fact_id, boundary_id
	FROM fact, boundaries_50m
	WHERE ST_INTERSECTS(boundary, coordinate::geometry)
	
SELECT boundary_id, boundary
	FROM public.boundaries_50m
	WHERE ST_INTERSECTS(ST_SetSRID( ST_MakePoint(10.961613, 56.931903), 4326),boundary)
	
	
	
	
	
	

WITH raster as (
SELECT ST_MakeEmptyRaster(20000,20000,4002607::float,3269410::float,50::float,50::float,0::float,0::float,3034) ras
),
fact as (
SELECT * from fact_ais_clean_v2 
WHERE draught IS NOT NULL
	limit 1000000
)
SELECT count(fact_id), max(draught), AVG(draught), ST_Transform(ST_PixelAsPolygon(ras,(ST_WorldToRasterCoord(ras,ST_Transform(coordinate::geometry,3034))).columnx,(ST_WorldToRasterCoord(ras,ST_Transform(coordinate::geometry,3034))).rowy),4326)
FROM raster, fact
GROUP BY  ST_PixelAsPolygon(ras,(ST_WorldToRasterCoord(ras,ST_Transform(coordinate::geometry,3034))).columnx,(ST_WorldToRasterCoord(ras,ST_Transform(coordinate::geometry,3034))).rowy)
ORDER BY count(fact_id) DESC

WITH raster as (
SELECT ST_AddBand(ST_MakeEmptyRaster(20000,20000,4002607::float,3269410::float,50::float,50::float,0::float,0::float,3034),'8BUI'::text, 0, null) ras
),
traj as (
	SELECT * from fact_trajectory
 	WHERE trajectory_id = 2910
-- 	limit 1
)
SELECT trajectory_id, ST_Transform((ST_PixelAsPolygons(ST_Intersection(ras,ST_AsRaster(ST_Transform(ST_SetSRID(coordinates,4326),3034), ras, '8BUI'::text),1))).geom,4326) --(ST_MetaData(ST_Intersection(ras,ST_AsRaster(ST_Transform(ST_SetSRID(coordinates,4326),3034), ras, '8BUI'::text),0))).*
from raster, traj


CREATE MATERIALIZED VIEW test as
WITH raster as (
SELECT ST_MakeEmptyRaster(20000,20000, 10.180489109669665,56.18922493790273,0.0005::float,0.0005::float,0::float,0::float,4326) ras
),
fact as (
SELECT * from fact_ais_clean_v2 limit 1000000
)
SELECT (ST_WorldToRasterCoord(ras,coordinate::geometry)).*, json_build_object('count', count(fact_id), 'max', max(draught), 'avg', AVG(draught), 'polygon', ST_AsGeoJSON(ST_PixelAsPolygon(ras,(ST_WorldToRasterCoord(ras,coordinate::geometry)).columnx,(ST_WorldToRasterCoord(ras,coordinate::geometry)).rowy)))
FROM raster, fact
GROUP BY  ST_AsGeoJSON(ST_PixelAsPolygon(ras,(ST_WorldToRasterCoord(ras,coordinate::geometry)).columnx,(ST_WorldToRasterCoord(ras,coordinate::geometry)).rowy)), ST_WorldToRasterCoord(ras,coordinate::geometry)
ORDER BY max(draught) DESC





WITH raster as (
SELECT ST_MakeEmptyRaster(20000,20000, 5.205498,52.841475,0.0005::float,0.0003::float,0::float,0::float,4326) ras
)
SELECT (ST_RasterToWorldCoord(ras,20000,20000)).*
FROM raster



---------------------------------------------
-- Get raster coordinates for trajectories --
CREATE MATERIALIZED VIEW tester_50_20210101_20210108 as
WITH raster as (
SELECT ST_AddBand(ST_MakeEmptyRaster(20000,20000,3584734::float,2997812::float,50::float,50::float,0::float,0::float,3034),'8BUI'::text, 0, null) ras
),
traj as (
	select * from fact_trajectory
	where date_start_id between 20210101 and 20210108
)
SELECT draught[1], ship_type_id, trajectory_id, (ST_WorldToRasterCoord(ras,(ST_PixelAsPoints(ST_AsRaster(ST_Transform(ST_SetSRID(coordinates,4326),3034), ras, '8BUI'::text, 1, 0, true))).geom)).*
from raster, traj

SELECT ST_SetSRID(coordinates,4326) from fact_trajectory
where date_start_id = 20210101

-- CREATE VIEW --
WITH raster as (
SELECT ST_AddBand(ST_MakeEmptyRaster(1000,1000,3584734::float,2997812::float,1000::float,1000::float,0::float,0::float,3034),'8BUI'::text, 0, null) ras
)
SELECT ST_Transform(ST_PixelAsPolygon(ras,columnx, rowy),4326), count(trajectory_id), max(draught)
FROM tester_1000_20210101, raster
GROUP BY ST_Transform(ST_PixelAsPolygon(ras,columnx, rowy),4326)
ORDER BY count(trajectory_id) DESC

SELECT ST_Transform(ST_SetSRID(ST_PixelAsPolygon(ST_MakeEmptyRaster(20000,20000,3584734::float,2997812::float,50::float,50::float,0::float,0::float,3034),14308,4048),3034),4326)

SELECT ST_WorldToRaster()

-- Create reference rasters --
CREATE TABLE reference_raster_50(
	ras raster
)

INSERT INTO reference_raster VALUES (ST_AddBand(ST_MakeEmptyRaster(20000,20000,3584734::float,2997812::float,50::float,50::float,0::float,0::float,3034),'8BUI'::text, 0, null))

CREATE TABLE reference_raster_1000(
	ras raster
);

INSERT INTO reference_raster_1000 VALUES (ST_AddBand(ST_MakeEmptyRaster(1000,1000,3584734::float,2997812::float,1000::float,1000::float,0::float,0::float,3034),'8BUI'::text, 0, null))

CREATE TABLE IF NOT EXISTS fact_trajectory_with_raster_coordinates (
            trajectory_id BIGSERIAL PRIMARY KEY, --Change to bigserial
            ship_id INTEGER NOT NULL,
            time_start_id INTEGER NOT NULL,
            date_start_id INTEGER NOT NULL,
            time_end_id INTEGER NOT NULL,
            date_end_id INTEGER NOT NULL,
            coordinates geometry(linestring) NOT NULL,
            length_meters FLOAT NOT NULL,
            duration INTEGER NOT NULL,
            audit_id INTEGER NOT NULL,
            total_points INTEGER NOT NULL,
            draught FLOAT[2],
            ship_type_id INTEGER NOT NULL DEFAULT 0,
			columnx INTEGER NOT NULL DEFAULT -1,
			rowy INTEGER NOT NULL DEFAULT -1,
			

            FOREIGN KEY (audit_id)
                REFERENCES dim_audit (audit_id)
                ON UPDATE CASCADE
                ON DELETE CASCADE,
            FOREIGN KEY (ship_id)
                REFERENCES dim_ship (ship_id)
                ON UPDATE CASCADE,
            FOREIGN KEY (time_start_id)
                REFERENCES dim_time (time_id)
                ON UPDATE CASCADE,
            FOREIGN KEY (date_start_id)
                REFERENCES dim_date (date_id)
                ON UPDATE CASCADE,
            FOREIGN KEY (time_end_id )
                REFERENCES dim_time (time_id)
                ON UPDATE CASCADE,
            FOREIGN KEY (date_end_id)
                REFERENCES dim_date (date_id)
                ON UPDATE CASCADE,
            FOREIGN KEY (ship_type_id)
                REFERENCES dim_ship_type (ship_type_id)
                ON UPDATE CASCADE
        )

INSERT INTO fact_trajectory_with_raster_coordinates (
	ship_id, time_start_id, date_start_id, time_end_id, date_end_id, coordinates, length_meters, duration, audit_id, total_points, draught, ship_type_id, columnx, rowy)
	SELECT ship_id, time_start_id, date_start_id, time_end_id, date_end_id, coordinates, length_meters, duration, audit_id, total_points, draught, ship_type_id, (ST_WorldToRasterCoord(ras,(ST_PixelAsPoints(ST_AsRaster(ST_Transform(ST_SetSRID(coordinates,4326),3034), ras, '8BUI'::text, 1, 0, true))).geom)).columnx, (ST_WorldToRasterCoord(ras,(ST_PixelAsPoints(ST_AsRaster(ST_Transform(ST_SetSRID(coordinates,4326),3034), ras, '8BUI'::text, 1, 0, true))).geom)).rowy
	FROM fact_trajectory, reference_raster_1000
	WHERE date_start_id between 20210101 and 20210108

SELECT * from fact_trajectory_with_raster_coordinates
LIMIT 1


-- Test til Ali --
-- CREATE VIEW --
WITH raster as (
SELECT ST_AddBand(ST_MakeEmptyRaster(1000,1000,3584734::float,2997812::float,1000::float,1000::float,0::float,0::float,3034),'8BUI'::text, 0, null) ras
)
SELECT ST_Transform(ST_PixelAsPolygon(ras,columnx, rowy),4326), count(trajectory_id), max(draught)
FROM tester_1000_20210101, raster
GROUP BY ST_Transform(ST_PixelAsPolygon(ras,columnx, rowy),4326)
ORDER BY count(trajectory_id) DESC

UPDATE reference_raster
SET ras = ST_SetValues (
	ras,
	1,
	(
		SELECT ARRAY(
			WITH raster as (
				SELECT ST_AddBand(ST_MakeEmptyRaster(1000,1000,3584734::float,2997812::float,1000::float,1000::float,0::float,0::float,3034),'8BUI'::text, 0, null) ras
				)
			SELECT (ST_PixelAsPoint(ras,columnx, rowy), max(draught))::geomval
			FROM tester_1000_20210101, raster
			GROUP BY ST_PixelAsPoint(ras,columnx, rowy)
			ORDER BY count(trajectory_id) DESC
		)
	)
)

SELECT ST_PixelAsPoint(ras,100,100)
FROM reference_raster

with rast as(
select ras from reference_raster
limit 1
)
SELECT ST_Transform(ST_SetSRID(ST_PixelAsPolygon(ras,1,1),3034),4326)
from rast
limit 1000


SELECT ST_AsTIFF(ras)
from reference_raster

SET postgis.gdal_enabled_drivers = 'ENABLE_ALL';
SELECT oid, lowrite(lo_open(oid, 131072), tiff) As num_bytes
FROM
( VALUES (lo_create(0),
ST_AsTIFF((SELECT ras FROM reference_raster))
) ) As v(oid,tiff);

\lo_export 1258716 '/home/myraster.tiff'


SELECT lo_unlink(1258716);
